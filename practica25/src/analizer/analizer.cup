package analizer;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code {:
    public static void main(String[] arg) {
        /* Crea un objeto parser */
        parser parserObj = new parser();
        /* Asigna el Scanner */
        Yylex miAnalizadorLexico = new Yylex(new InputStreamReader(System.in));
        parserObj.setScanner(miAnalizadorLexico);
        try{
            parserObj.parse();
        } catch(Exception x){
            System.err.println(x.getMessage());
        }
    }
:};

terminal MAIN, WHILE, IF, ELSE, BREAK, PUTS, PUTW, INT;
terminal OP, CP, OB, CB;
terminal SUM, RES, MUL, DIV;
terminal LT, GT, EQ, NE, OR, AND, ASG;
terminal EOL, DBQUOTE;
terminal STR, NUM;
terminal IDENT;

non terminal exp, expl, rexp, vexp, aexp, pexp, fexp, asexp, cexp, wexp, dexp, dexpl, mexp, mexpl, strexp, cuerpo, principal, instanciar;

precedence left MAIN, IF, ELSE, BREAK;
precedence left ASG;
precedence left OR, AND;
precedence left LT, GT, EQ, NE, SUM, RES, MUL, DIV;
precedence left INT, IDENT, EOL;

expl ::= expl exp | exp;

exp ::= dexpl | principal;

principal ::= MAIN instanciar cuerpo;

instanciar ::= OP CP;

cuerpo ::= OB mexpl CB | OB CB;

mexpl ::= mexpl mexp | mexp;

mexp ::= WHILE OP rexp CP OB wexp CB
        | asexp
        | fexp
        | cexp;

dexpl ::= dexp dexpl | dexp;

dexp ::= INT IDENT EOL;

rexp ::= vexp GT vexp
        | vexp LT vexp
        | vexp NE vexp
        | vexp OR vexp
        | vexp AND vexp
        | vexp EQ vexp;

vexp ::= IDENT | NUM;

aexp ::= vexp MUL vexp
        | vexp RES vexp
        | vexp SUM vexp
        | vexp DIV vexp;

pexp ::= aexp | IDENT;

fexp ::= PUTS OP strexp CP
        | PUTW OP pexp CP;

strexp ::= DBQUOTE STR DBQUOTE;

asexp ::= IDENT ASG aexp
        | IDENT ASG vexp;

cexp ::= IF OP rexp CP OB mexpl CB
        | IF OP rexp CP OB mexpl CB ELSE OB mexpl CB;

wexp ::= expl | BREAK;